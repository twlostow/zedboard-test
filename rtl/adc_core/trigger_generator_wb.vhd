---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Trigger Generator Block
---------------------------------------------------------------------------------------
-- File           : trigger_generator_wb.vhd
-- Author         : auto-generated by wbgen2 from trigger_generator_wb.wb
-- Created        : Thu Sep 15 18:33:44 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE trigger_generator_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.tg_wbgen2_pkg.all;


entity trigger_generator_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(1 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    clk_acq_i                                : in     std_logic;
    regs_i                                   : in     t_tg_in_registers;
    regs_o                                   : out    t_tg_out_registers
  );
end trigger_generator_wb;

architecture syn of trigger_generator_wb is

signal tg_csr_enable_int                        : std_logic      ;
signal tg_csr_enable_sync0                      : std_logic      ;
signal tg_csr_enable_sync1                      : std_logic      ;
signal tg_csr_polarity_int                      : std_logic      ;
signal tg_csr_polarity_sync0                    : std_logic      ;
signal tg_csr_polarity_sync1                    : std_logic      ;
signal tg_csr_mask_int                          : std_logic_vector(3 downto 0);
signal tg_csr_mask_swb                          : std_logic      ;
signal tg_csr_mask_swb_delay                    : std_logic      ;
signal tg_csr_mask_swb_s0                       : std_logic      ;
signal tg_csr_mask_swb_s1                       : std_logic      ;
signal tg_csr_mask_swb_s2                       : std_logic      ;
signal tg_csr_arm_int                           : std_logic      ;
signal tg_csr_arm_int_delay                     : std_logic      ;
signal tg_csr_arm_sync0                         : std_logic      ;
signal tg_csr_arm_sync1                         : std_logic      ;
signal tg_csr_arm_sync2                         : std_logic      ;
signal tg_csr_force_int                         : std_logic      ;
signal tg_csr_force_int_delay                   : std_logic      ;
signal tg_csr_force_sync0                       : std_logic      ;
signal tg_csr_force_sync1                       : std_logic      ;
signal tg_csr_force_sync2                       : std_logic      ;
signal tg_csr_triggered_sync0                   : std_logic      ;
signal tg_csr_triggered_sync1                   : std_logic      ;
signal tg_thr_lo_int                            : std_logic_vector(15 downto 0);
signal tg_thr_lo_swb                            : std_logic      ;
signal tg_thr_lo_swb_delay                      : std_logic      ;
signal tg_thr_lo_swb_s0                         : std_logic      ;
signal tg_thr_lo_swb_s1                         : std_logic      ;
signal tg_thr_lo_swb_s2                         : std_logic      ;
signal tg_thr_hi_int                            : std_logic_vector(15 downto 0);
signal tg_thr_hi_swb                            : std_logic      ;
signal tg_thr_hi_swb_delay                      : std_logic      ;
signal tg_thr_hi_swb_s0                         : std_logic      ;
signal tg_thr_hi_swb_s1                         : std_logic      ;
signal tg_thr_hi_swb_s2                         : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(1 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tg_csr_enable_int <= '0';
      tg_csr_polarity_int <= '0';
      tg_csr_mask_int <= "0000";
      tg_csr_mask_swb <= '0';
      tg_csr_mask_swb_delay <= '0';
      tg_csr_arm_int <= '0';
      tg_csr_arm_int_delay <= '0';
      tg_csr_force_int <= '0';
      tg_csr_force_int_delay <= '0';
      tg_thr_lo_int <= "0000000000000000";
      tg_thr_lo_swb <= '0';
      tg_thr_lo_swb_delay <= '0';
      tg_thr_hi_int <= "0000000000000000";
      tg_thr_hi_swb <= '0';
      tg_thr_hi_swb_delay <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          tg_csr_mask_swb <= tg_csr_mask_swb_delay;
          tg_csr_mask_swb_delay <= '0';
          tg_csr_arm_int <= tg_csr_arm_int_delay;
          tg_csr_arm_int_delay <= '0';
          tg_csr_force_int <= tg_csr_force_int_delay;
          tg_csr_force_int_delay <= '0';
          tg_thr_lo_swb <= tg_thr_lo_swb_delay;
          tg_thr_lo_swb_delay <= '0';
          tg_thr_hi_swb <= tg_thr_hi_swb_delay;
          tg_thr_hi_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(1 downto 0) is
          when "00" => 
            if (wb_we_i = '1') then
              tg_csr_enable_int <= wrdata_reg(0);
              tg_csr_polarity_int <= wrdata_reg(1);
              tg_csr_mask_int <= wrdata_reg(5 downto 2);
              tg_csr_mask_swb <= '1';
              tg_csr_mask_swb_delay <= '1';
              tg_csr_arm_int <= wrdata_reg(6);
              tg_csr_arm_int_delay <= wrdata_reg(6);
              tg_csr_force_int <= wrdata_reg(7);
              tg_csr_force_int_delay <= wrdata_reg(7);
            end if;
            rddata_reg(0) <= tg_csr_enable_int;
            rddata_reg(1) <= tg_csr_polarity_int;
            rddata_reg(5 downto 2) <= tg_csr_mask_int;
            rddata_reg(6) <= '0';
            rddata_reg(7) <= '0';
            rddata_reg(8) <= tg_csr_triggered_sync1;
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "01" => 
            if (wb_we_i = '1') then
              tg_thr_lo_int <= wrdata_reg(15 downto 0);
              tg_thr_lo_swb <= '1';
              tg_thr_lo_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= tg_thr_lo_int;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10" => 
            if (wb_we_i = '1') then
              tg_thr_hi_int <= wrdata_reg(15 downto 0);
              tg_thr_hi_swb <= '1';
              tg_thr_hi_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= tg_thr_hi_int;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Enable
-- synchronizer chain for field : Enable (type RW/RO, clk_sys_i <-> clk_acq_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.csr_enable_o <= '0';
      tg_csr_enable_sync0 <= '0';
      tg_csr_enable_sync1 <= '0';
    elsif rising_edge(clk_acq_i) then
      tg_csr_enable_sync0 <= tg_csr_enable_int;
      tg_csr_enable_sync1 <= tg_csr_enable_sync0;
      regs_o.csr_enable_o <= tg_csr_enable_sync1;
    end if;
  end process;
  
  
-- Polarity
-- synchronizer chain for field : Polarity (type RW/RO, clk_sys_i <-> clk_acq_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.csr_polarity_o <= '0';
      tg_csr_polarity_sync0 <= '0';
      tg_csr_polarity_sync1 <= '0';
    elsif rising_edge(clk_acq_i) then
      tg_csr_polarity_sync0 <= tg_csr_polarity_int;
      tg_csr_polarity_sync1 <= tg_csr_polarity_sync0;
      regs_o.csr_polarity_o <= tg_csr_polarity_sync1;
    end if;
  end process;
  
  
-- Channel Mask
-- asynchronous std_logic_vector register : Channel Mask (type RW/RO, clk_acq_i <-> clk_sys_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tg_csr_mask_swb_s0 <= '0';
      tg_csr_mask_swb_s1 <= '0';
      tg_csr_mask_swb_s2 <= '0';
      regs_o.csr_mask_o <= "0000";
    elsif rising_edge(clk_acq_i) then
      tg_csr_mask_swb_s0 <= tg_csr_mask_swb;
      tg_csr_mask_swb_s1 <= tg_csr_mask_swb_s0;
      tg_csr_mask_swb_s2 <= tg_csr_mask_swb_s1;
      if ((tg_csr_mask_swb_s2 = '0') and (tg_csr_mask_swb_s1 = '1')) then
        regs_o.csr_mask_o <= tg_csr_mask_int;
      end if;
    end if;
  end process;
  
  
-- Arm
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.csr_arm_o <= '0';
      tg_csr_arm_sync0 <= '0';
      tg_csr_arm_sync1 <= '0';
      tg_csr_arm_sync2 <= '0';
    elsif rising_edge(clk_acq_i) then
      tg_csr_arm_sync0 <= tg_csr_arm_int;
      tg_csr_arm_sync1 <= tg_csr_arm_sync0;
      tg_csr_arm_sync2 <= tg_csr_arm_sync1;
      regs_o.csr_arm_o <= tg_csr_arm_sync2 and (not tg_csr_arm_sync1);
    end if;
  end process;
  
  
-- Force Manual Trigger
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.csr_force_o <= '0';
      tg_csr_force_sync0 <= '0';
      tg_csr_force_sync1 <= '0';
      tg_csr_force_sync2 <= '0';
    elsif rising_edge(clk_acq_i) then
      tg_csr_force_sync0 <= tg_csr_force_int;
      tg_csr_force_sync1 <= tg_csr_force_sync0;
      tg_csr_force_sync2 <= tg_csr_force_sync1;
      regs_o.csr_force_o <= tg_csr_force_sync2 and (not tg_csr_force_sync1);
    end if;
  end process;
  
  
-- Triggered
-- synchronizer chain for field : Triggered (type RO/WO, clk_acq_i -> clk_sys_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tg_csr_triggered_sync0 <= '0';
      tg_csr_triggered_sync1 <= '0';
    elsif rising_edge(clk_acq_i) then
      tg_csr_triggered_sync0 <= regs_i.csr_triggered_i;
      tg_csr_triggered_sync1 <= tg_csr_triggered_sync0;
    end if;
  end process;
  
  
-- Threshold
-- asynchronous std_logic_vector register : Threshold (type RW/RO, clk_acq_i <-> clk_sys_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tg_thr_lo_swb_s0 <= '0';
      tg_thr_lo_swb_s1 <= '0';
      tg_thr_lo_swb_s2 <= '0';
      regs_o.thr_lo_o <= "0000000000000000";
    elsif rising_edge(clk_acq_i) then
      tg_thr_lo_swb_s0 <= tg_thr_lo_swb;
      tg_thr_lo_swb_s1 <= tg_thr_lo_swb_s0;
      tg_thr_lo_swb_s2 <= tg_thr_lo_swb_s1;
      if ((tg_thr_lo_swb_s2 = '0') and (tg_thr_lo_swb_s1 = '1')) then
        regs_o.thr_lo_o <= tg_thr_lo_int;
      end if;
    end if;
  end process;
  
  
-- Threshold
-- asynchronous std_logic_vector register : Threshold (type RW/RO, clk_acq_i <-> clk_sys_i)
  process (clk_acq_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tg_thr_hi_swb_s0 <= '0';
      tg_thr_hi_swb_s1 <= '0';
      tg_thr_hi_swb_s2 <= '0';
      regs_o.thr_hi_o <= "0000000000000000";
    elsif rising_edge(clk_acq_i) then
      tg_thr_hi_swb_s0 <= tg_thr_hi_swb;
      tg_thr_hi_swb_s1 <= tg_thr_hi_swb_s0;
      tg_thr_hi_swb_s2 <= tg_thr_hi_swb_s1;
      if ((tg_thr_hi_swb_s2 = '0') and (tg_thr_hi_swb_s1 = '1')) then
        regs_o.thr_hi_o <= tg_thr_hi_int;
      end if;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
